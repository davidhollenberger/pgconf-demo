---
  - name: check if receiver process is running on Slave
    shell: ps -ef|grep receive[r]
    register: ps_receiver
    changed_when: ps_receiver.rc != 2
    failed_when: ps_receiver.rc == 2

  - name: shutdown postgres
    command: /usr/pgsql-{{ pg_version }}/bin/pg_ctl stop
    become: yes
    become_user: postgres
    environment: "{{ postgres_env }}"
    when: ps_receiver.stdout_lines|count == 0

  - name: delete data directory
    file: path="{{ pgdata_dir }}" state=absent
    when: ps_receiver.stdout_lines|count == 0

  - name: create empty data directory
    file: path="{{ pgdata_dir }}" state=directory owner=postgres group=postgres mode=0700
    when: ps_receiver.stdout_lines|count == 0

  - name: run pg_basebackup
    command: "/usr/bin/pg_basebackup -x -R -P -D {{ pgdata_dir }} -h {{ hostvars[item]['ansible_default_ipv4']['address'] }}"
    become: yes
    become_user: postgres
    with_items: "{{ groups[pg_cluster_group] | intersect(groups[pg_master_group]) }}"
    when: ps_receiver.stdout_lines|count == 0
    async: 10000
    poll: 30
    register: pg_basebackup

  - name: Update postgresql.conf on Slave
    lineinfile: dest="{{ pgdata_dir }}/postgresql.conf" state=present line="{{ item.value }}" regexp="{{ item.regexp }}"
    with_items: "{{ postgresql_conf_slave }}"
    when: ps_receiver.stdout_lines|count == 0

  - name: Startup postgres on Slave
    command: /usr/pgsql-{{ pg_version }}/bin/pg_ctl start
    become: yes
    become_user: postgres
    environment: "{{ postgres_env }}"
    when: ps_receiver.stdout_lines|count == 0

  - name: check if receiver process is running on Slave
    shell: ps -ef|grep receive[r]
    ignore_errors: yes
    register: ps_receiver_slave
    until: ps_receiver_slave.stdout.find("wal receiver process") != -1
    retries: 10
    delay: 5
